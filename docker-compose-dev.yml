version: "3"

services:
  web:
    container_name: web
    command: gunicorn --bind 0.0.0.0:8000 --workers 16 backend.wsgi --timeout 300
    # image: server_image
    build: ./backend
    volumes: 
      - logs_vol:/logs
      - static_volume:/usr/src/backend/static
    env_file:
      - backend/.env
    ports:
      - "8000:8000"
    # restart: unless-stopped
  
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes: 
      - redis:/data
    command: redis-server --save 20 1 --loglevel warning
    restart: unless-stopped
  
  celery_default:
    container_name: celery_default
    build: ./backend
    # image: server_image
    working_dir: /home/backend
    volumes:
      - ./backend:/home/backend
    depends_on:
      redis:
        condition: service_started
      web:
        condition: service_started
    command: python3 -m celery -A backend worker -Q default -n default_worker --concurrency=1 -l DEBUG
    # restart: unless-stopped

  celery_asr_tts:
    container_name: celery_asr_tts
    build: ./backend
    # image: server_image
    working_dir: /home/backend
    volumes:
      - ./backend:/home/backend
    depends_on:
      redis:
        condition: service_started
      web:
        condition: service_started
    command: python3 -m celery -A backend worker -Q asr_tts -n asr_tts_worker --concurrency=1 -l DEBUG
    # restart: unless-stopped

  celery_nmt:
    container_name: celery_nmt
    build: ./backend
    # image: server_image
    working_dir: /home/backend
    volumes:
      - ./backend:/home/backend
    depends_on:
      redis:
        condition: service_started
      web:
        condition: service_started
    command: python3 -m celery -A backend worker -Q nmt -n nmt_worker --concurrency=1 -l DEBUG --pool threads
    # restart: unless-stopped

  celery_newsletter:
    container_name: celery_newsletter
    build: ./backend
    # image: server_image
    working_dir: /home/backend
    volumes:
      - ./backend:/home/backend
    depends_on:
      redis:
        condition: service_started
      web:
        condition: service_started
    command: python3 -m celery -A backend worker -Q newsletter -n newsletter_worker --concurrency=1 -l DEBUG
    # restart: unless-stopped

  celery_ekstep_asr:
    container_name: celery_ekstep_asr
    build: ./backend
    # image: server_image
    working_dir: /home/backend
    volumes:
      - ./backend:/home/backend
    depends_on:
      redis:
        condition: service_started
      web:
        condition: service_started
    command: python3 -m celery -A backend worker -Q ekstep_asr -n ekstep_asr_worker --concurrency=1 -l DEBUG
    restart: unless-stopped

  celery_beat:
    container_name: celery_beat
    build: ./backend
    # image: server_image
    working_dir: /home/backend
    volumes:
      - ./backend:/home/backend
    depends_on:
      redis:
        condition: service_started
      web:
        condition: service_started
    command: python3 -m celery -A backend beat -l DEBUG
    restart: unless-stopped
  
  # flower:
  #   container_name: flower
  #   # image: server_image
  #   env_file:
  #     - backend/.env
  #   working_dir: /home/backend
  #   volumes:
  #     - ./backend:/home/backend
  #   ports:
  #     - "5555:5555"
  #   depends_on:
  #     redis:
  #       condition: service_started
  #     web:
  #       condition: service_started
  #     celery_default:
  #       condition: service_started
  #     celery_asr_tts:
  #       condition: service_started
  #     celery_nmt:
  #       condition: service_started
  #     celery_beat:
  #       condition: service_started
  #   command: python3 -m celery -A backend flower --loglevel=info
  #   restart: unless-stopped
  nginx:
    build: ./nginx
    image: evgeniy-khyst/nginx
    env_file:
      - ./config.env
    volumes:
      - nginx_conf:/etc/nginx/sites
      - letsencrypt_certs:/etc/letsencrypt
      - certbot_acme_challenge:/var/www/certbot
      - ./vhosts:/etc/nginx/vhosts
      - static_volume:/backend/static
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped

  certbot:
    build: ./certbot
    image: evgeniy-khyst/certbot
    env_file:
      - ./config.env
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - certbot_acme_challenge:/var/www/certbot
  # caddy:
  #   container_name: caddy
  #   image: caddy:latest
  #   volumes:
  #     - ../caddy/Caddyfile:/etc/caddy/Caddyfile
  #     - caddy_data:/data
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   restart: unless-stopped

volumes:
  caddy_data:
    driver: local
  redis:
    driver: local
  nginx_conf:
    # external: true
  letsencrypt_certs:
    # external: true
  certbot_acme_challenge:
  static_volume:
  logs_vol:

