version: "3"

services:
  backend:
    container_name: backend
    image: server_image
    build:
      context: ./backend
    volumes: 
      - ./backend/logs:/home/backend/logs
    env_file:
      - backend/.env
    ports:
      - "8000:8000"
    # command: uvicorn main:app --workers $BACKEND_WORKERS --port $BACKEND_PORT --host 0.0.0.0
    restart: unless-stopped
  
  redis:
    image: redis:latest
    container_name: redis
    expose:
      - 6379
    # ports:
    #   - "6379:6379"
    volumes: 
      - redis:/data
    command: redis-server --save 20 1 --loglevel warning
    restart: unless-stopped
  
  celery_default:
    container_name: celery_default
    image: server_image
    working_dir: /home/backend
    volumes:
      - ./backend:/home/backend
    depends_on:
      redis:
        condition: service_started
      backend:
        condition: service_started
    command: python3 -m celery -A backend worker -Q default -n default_worker --concurrency=1 -l DEBUG
    restart: unless-stopped

  celery_asr_tts:
    container_name: celery_asr_tts
    image: server_image
    working_dir: /home/backend
    volumes:
      - ./backend:/home/backend
    depends_on:
      redis:
        condition: service_started
      backend:
        condition: service_started
    command: python3 -m celery -A backend worker -Q asr_tts -n asr_tts_worker --concurrency=1 -l DEBUG
    restart: unless-stopped

  celery_nmt:
    container_name: celery_nmt
    image: server_image
    working_dir: /home/backend
    volumes:
      - ./backend:/home/backend
    depends_on:
      redis:
        condition: service_started
      backend:
        condition: service_started
    command: python3 -m celery -A backend worker -Q nmt -n nmt_worker --concurrency=1 -l DEBUG --pool threads
    restart: unless-stopped

  celery_newsletter:
    container_name: celery_newsletter
    image: server_image
    working_dir: /home/backend
    volumes:
      - ./backend:/home/backend
    depends_on:
      redis:
        condition: service_started
      backend:
        condition: service_started
    command: python3 -m celery -A backend worker -Q newsletter -n newsletter_worker --concurrency=1 -l DEBUG
    restart: unless-stopped

  celery_ekstep_asr:
    container_name: celery_ekstep_asr
    image: server_image
    working_dir: /home/backend
    volumes:
      - ./backend:/home/backend
    depends_on:
      redis:
        condition: service_started
      backend:
        condition: service_started
    command: python3 -m celery -A backend worker -Q ekstep_asr -n ekstep_asr_worker --concurrency=1 -l DEBUG
    restart: unless-stopped

  celery_beat:
    container_name: celery_beat
    image: server_image
    working_dir: /home/backend
    volumes:
      - ./backend:/home/backend
    depends_on:
      redis:
        condition: service_started
      backend:
        condition: service_started
    command: python3 -m celery -A backend beat -l DEBUG
    restart: unless-stopped
  
  flower:
    container_name: flower
    image: server_image
    env_file:
      - backend/.env
    working_dir: /home/backend
    volumes:
      - ./backend:/home/backend
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_started
      backend:
        condition: service_started
      celery_default:
        condition: service_started
      celery_asr_tts:
        condition: service_started
      celery_nmt:
        condition: service_started
      # celery_voiceover:
      #   condition: service_started
      celery_beat:
        condition: service_started
    command: python3 -m celery -A backend flower --loglevel=info
    restart: unless-stopped

  nginx:
    build: ./nginx
    image: evgeniy-khyst/nginx
    env_file:
      - ./config.env
    volumes:
      - nginx_conf:/etc/nginx/sites
      - letsencrypt_certs:/etc/letsencrypt
      - certbot_acme_challenge:/var/www/certbot
      - ./vhosts:/etc/nginx/vhosts
      - static_volume:/backend/static
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped

  certbot:
    build: ./certbot
    image: evgeniy-khyst/certbot
    env_file:
      - ./config.env
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - certbot_acme_challenge:/var/www/certbot


volumes:
  nginx_conf:
    external: true
  letsencrypt_certs:
    external: true       
  certbot_acme_challenge:
  static_volume:
  redis:
    driver: local
